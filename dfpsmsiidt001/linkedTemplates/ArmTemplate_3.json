{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "dfpsmsiidt001"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PL_COPY_UI_TABLE_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "To create the tables on DWH database based on dwl_copy_table_list table ",
				"activities": [
					{
						"name": "Drop and Create Table_copy1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlDWSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dsqlp_parametric",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": "dwh",
									"tableName": "STG_PRODUCTS_VALID"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "qtrsqldb",
								"type": "DatasetReference",
								"parameters": {
									"tableName": "STG_PRODUCTS_VALID",
									"schemaName": "dbo"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "PL_TOOL"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-25T14:24:40Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_CSV_TO_STG')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetFileList",
						"description": "Get file list from processing container",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dls_processing_csv",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "*.csv"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEachFile",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetFileList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetFileList').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "IsFileNameCorrect",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "lookupFileName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(if(\nempty(activity('lookupFileName').output.value)\n,0,1),1)\n",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Send E_Mail",
												"type": "WebActivity",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"url": "https://lapp-psmsii-dt-westeu-004.azurewebsites.net:443/api/lappwf_psmsii_dt_003/triggers/manual/invoke?api-version=2020-05-01-preview&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=gfkqhHVGM0XUwIyFoLgEKxzhSohusGVbGzkbginsRcg",
													"connectVia": {
														"referenceName": "integrationRuntime10min",
														"type": "IntegrationRuntimeReference"
													},
													"method": "POST",
													"headers": {},
													"body": {
														"value": "{\"EmailType\":\"NotExpectedFile\"}",
														"type": "Expression"
													},
													"disableCertValidation": false
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "P_COPY_FILE_DATA",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dwh].[P_COPY_FILE_DATA]",
													"storedProcedureParameters": {
														"FILENAME": {
															"value": {
																"value": "@item().name",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "ls_dsqlpqtr",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								},
								{
									"name": "lookupFileName",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlDWSource",
											"sqlReaderQuery": {
												"value": "@concat(\n'SELECT 1 as lkp_id FROM [etl].[DWL_FILE_LIST] where DS_FILENAME= '\n,''''\n,replace(item().name,'.csv','')\n,'''')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_dwl_file_list",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								}
							]
						}
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "PL_MAIN_TRANSACTION"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-20T12:55:14Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_CSV_TO_STG_bulk_load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetFileList",
						"description": "Get file list from processing container",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dls_processing_csv_folder",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEachFile",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "truncateStgTransactions",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetFileList').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "P_COPY_FILE_DATA_copy1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dwh].[P_COPY_FILE_DATA]",
										"storedProcedureParameters": {
											"FILENAME": {
												"value": {
													"value": "@item().name",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_dsqlpqtr",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "truncateStgTransactions",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GetFileList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlDWSource",
								"sqlReaderQuery": "truncate table [dwh].[STG_TRANSACTIONS];\nselect 1;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_stg_transactions",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Dev"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-20T12:55:14Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_CSV_TO_STG_initial')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetFileList",
						"description": "Get file list from processing container",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dls_processing_csv",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "*.csv"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEachFile",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetFileList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetFileList').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "P_COPY_FILE_DATA",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dwh].[P_COPY_FILE_DATA]",
										"storedProcedureParameters": {
											"FILENAME": {
												"value": {
													"value": "@item().name",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_dsqlpqtr",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "PL_MAIN_TRANSACTION"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-20T12:55:14Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_CUSTOM_TO_STG')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetXMLFiles",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_custom_xml",
								"type": "DatasetReference",
								"parameters": {
									"xmlfileName": "*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetXMLFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetXMLFiles').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy_Dec",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "XmlSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": false,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "XmlReadSettings",
												"validationMode": "none",
												"detectDataType": true,
												"namespaces": true
											}
										},
										"sink": {
											"type": "SqlDWSink",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "$['ReleaseNotification']['NotificationSender']"
													},
													"sink": {
														"name": "NotificationSender",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['ReleaseNotification']['NotificationRef']"
													},
													"sink": {
														"name": "NotificationRef",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['ReleaseNotification']['NotificationDate']"
													},
													"sink": {
														"name": "NotificationDate",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['ReleaseNotification']['Declaration']['declarationNo']"
													},
													"sink": {
														"name": "declarationNo",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['ReleaseNotification']['Declaration']['declarationStatus']"
													},
													"sink": {
														"name": "declarationStatus",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['ReleaseNotification']['Declaration']['declarationType']"
													},
													"sink": {
														"name": "declarationType",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['ReleaseNotification']['Declaration']['releaseOrderNumber']"
													},
													"sink": {
														"name": "releaseOrderNumber",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['ReleaseNotification']['Declaration']['releasedDate']"
													},
													"sink": {
														"name": "releasedDate",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['ReleaseNotification']['Declaration']['supplierCR']"
													},
													"sink": {
														"name": "supplierCR",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['ReleaseNotification']['Declaration']['supplierCustomsCode']"
													},
													"sink": {
														"name": "supplierCustomsCode",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['ReleaseNotification']['Declaration']['countryOfLoading']"
													},
													"sink": {
														"name": "countryOfLoading",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['ReleaseNotification']['Declaration']['firstCountryOfLoading']"
													},
													"sink": {
														"name": "firstCountryOfLoading",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['ReleaseNotification']['Declaration']['accountType']"
													},
													"sink": {
														"name": "accountType",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['ReleaseNotification']['Declaration']['companyName']"
													},
													"sink": {
														"name": "companyName",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['ReleaseNotification']['Declaration']['establishmentId']"
													},
													"sink": {
														"name": "establishmentId",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['ReleaseNotification']['Declaration']['companyNameAr']"
													},
													"sink": {
														"name": "companyNameAr",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['ReleaseNotification']['Declaration']['email']"
													},
													"sink": {
														"name": "email",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['ReleaseNotification']['Declaration']['address']"
													},
													"sink": {
														"name": "address",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['ReleaseNotification']['Declaration']['portType']"
													},
													"sink": {
														"name": "portType",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['ReleaseNotification']['Declaration']['entryOrExitPortName']"
													},
													"sink": {
														"name": "entryOrExitPortName",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['ReleaseNotification']['Declaration']['clearingAgencyCR']"
													},
													"sink": {
														"name": "clearingAgencyCR",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['ReleaseNotification']['Declaration']['clearingAgencyNameEng']"
													},
													"sink": {
														"name": "clearingAgencyNameEng",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['ReleaseNotification']['Declaration']['clearingAgencyNameAR']"
													},
													"sink": {
														"name": "clearingAgencyNameAR",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['ReleaseNotification']['Declaration']['portOfLoading']"
													},
													"sink": {
														"name": "portOfLoading",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['ReleaseNotification']['Declaration']['importerName']"
													},
													"sink": {
														"name": "importerName",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['ReleaseNotification']['Declaration']['exporterName']"
													},
													"sink": {
														"name": "exporterName",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['ReleaseNotification']['Declaration']['bolNumber']"
													},
													"sink": {
														"name": "bolNumber",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['ReleaseNotification']['Declaration']['masterBolOrAWBNumber']"
													},
													"sink": {
														"name": "masterBolOrAWBNumber",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['ReleaseNotification']['Declaration']['cargoManifestNumber']"
													},
													"sink": {
														"name": "cargoManifestNumber",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['ReleaseNotification']['Declaration']['voyageOrFlightNumber']"
													},
													"sink": {
														"name": "voyageOrFlightNumber",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['ReleaseNotification']['Declaration']['carrierName']"
													},
													"sink": {
														"name": "carrierName",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "ds_custom_xml",
											"type": "DatasetReference",
											"parameters": {
												"xmlfileName": "@item().name"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dsqlp_parametric",
											"type": "DatasetReference",
											"parameters": {
												"schemaName": "dwh",
												"tableName": "STG_CUSTOMS_DEC"
											}
										}
									]
								},
								{
									"name": "stgcustomsdec",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Lookup1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlDWSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT 1\nFROM [dwh].[STG_CUSTOMS_DEC] as SCD\nWHERE \n(\ntry_convert(nvarchar(200), NULLIF([NotificationSender], '''')) IS NULL\nOR try_convert(datetime, NULLIF([NotificationDate], '''')) IS NULL\nOR try_convert(nvarchar(200), NULLIF([NotificationRef], '''')) IS NULL\nOR try_convert(nvarchar(200), NULLIF([bolNumber], '''')) IS NULL\nOR try_convert(nvarchar(200), NULLIF([declarationNo], '''')) IS NULL\nOR try_convert(nvarchar(200), NULLIF([declarationStatus], '''')) IS NULL\nOR try_convert(nvarchar(200), NULLIF([declarationType], '''')) IS NULL\nOR NOT EXISTS (SELECT 1 FROM dwh.STG_CUSTOMS_ITEM AS SCI WHERE sci.declarationNo=SCD.declarationNo)\n)\nAND [NotificationRef] = ','''',activity('Lookup1').output.firstRow.NotificationRef,'''')\n\n\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_stg_customs_dec",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "stgcustomsdec",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(if(\nempty(activity('stgcustomsdec').output.value)\n,0,1),0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Web1",
												"type": "WebActivity",
												"dependsOn": [
													{
														"activity": "deletestgcustomsdec",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"url": "https://lapp-psmsii-dt-westeu-004.azurewebsites.net:443/api/lappwf_psmsii_dt_003/triggers/manual/invoke?api-version=2020-05-01-preview&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=gfkqhHVGM0XUwIyFoLgEKxzhSohusGVbGzkbginsRcg",
													"connectVia": {
														"referenceName": "integrationRuntime10min",
														"type": "IntegrationRuntimeReference"
													},
													"method": "POST",
													"headers": {},
													"body": {
														"EmailType": "CustomInvalidFile"
													}
												}
											},
											{
												"name": "deletestgcustomsdec",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlDWSource",
														"sqlReaderQuery": {
															"value": "@concat(' DELETE FROM [dwh].[STG_CUSTOMS_DEC] WHERE [NotificationRef] = ','''',activity('Lookup1').output.firstRow.NotificationRef,''';\nSELECT 1;\nDELETE FROM [dwh].[STG_CUSTOMS_ITEM] WHERE [declarationno] = ','''',activity('Lookup1').output.firstRow.NotificationRef,''';')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "ds_stg_customs_dec",
														"type": "DatasetReference",
														"parameters": {}
													},
													"firstRowOnly": false
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Copy_Supv",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "XmlSource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true,
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "XmlReadSettings",
															"validationMode": "none",
															"detectDataType": true,
															"namespaces": true
														}
													},
													"sink": {
														"type": "SqlDWSink",
														"disableMetricsCollection": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"mappings": [
															{
																"source": {
																	"path": "[['name']"
																},
																"sink": {
																	"name": "name",
																	"type": "String"
																}
															},
															{
																"source": {
																	"path": "[['mobileNumber']"
																},
																"sink": {
																	"name": "mobileNumber",
																	"type": "String"
																}
															},
															{
																"source": {
																	"path": "$['ReleaseNotification']['Declaration']['declarationNo']"
																},
																"sink": {
																	"name": "declarationNo",
																	"type": "String"
																}
															}
														],
														"collectionReference": "$['ReleaseNotification']['Declaration']['SupervisorDetails']['Supervisor']",
														"mapComplexValuesToString": false
													}
												},
												"inputs": [
													{
														"referenceName": "ds_custom_xml",
														"type": "DatasetReference",
														"parameters": {
															"xmlfileName": "@item().name"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "dsqlp_parametric",
														"type": "DatasetReference",
														"parameters": {
															"schemaName": "dwh",
															"tableName": "STG_CUSTOMS_SUPV"
														}
													}
												]
											}
										]
									}
								},
								{
									"name": "Lookup1",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Copy_Item",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Copy_Dec",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlDWSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_stg_customs_dec",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Copy_Item",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "XmlSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "XmlReadSettings",
												"validationMode": "none",
												"detectDataType": true,
												"namespaces": true
											}
										},
										"sink": {
											"type": "SqlDWSink",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "[['hscode']"
													},
													"sink": {
														"name": "hscode",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['itemQuantity']"
													},
													"sink": {
														"name": "itemQuantity",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['itemQuantityUOM']"
													},
													"sink": {
														"name": "itemQuantityUOM",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['netWeight']"
													},
													"sink": {
														"name": "netWeight",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['netWeightUOM']"
													},
													"sink": {
														"name": "netWeightUOM",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['countryOfOrigin']"
													},
													"sink": {
														"name": "countryOfOrigin",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['declaredValue']"
													},
													"sink": {
														"name": "declaredValue",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['foreignCurrency']"
													},
													"sink": {
														"name": "foreignCurrency",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['declaredValueQAR']"
													},
													"sink": {
														"name": "declaredValueQAR",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['ReleaseNotification']['Declaration']['declarationNo']"
													},
													"sink": {
														"name": "declarationNo",
														"type": "String"
													}
												}
											],
											"collectionReference": "$['ReleaseNotification']['Declaration']['ItemDetails']['Item']",
											"mapComplexValuesToString": true
										}
									},
									"inputs": [
										{
											"referenceName": "ds_custom_xml",
											"type": "DatasetReference",
											"parameters": {
												"xmlfileName": "@item().name"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dsqlp_parametric",
											"type": "DatasetReference",
											"parameters": {
												"schemaName": "dwh",
												"tableName": "STG_CUSTOMS_ITEM"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Dev"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_FILE_TRANSFER')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "from upload to processing folder",
				"activities": [
					{
						"name": "fileTransfer",
						"description": "file transfering from upload container to processing container on data lake.",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "dls_upload_binary",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dls_processing_binary",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "PL_MAIN_TRANSACTION"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-20T12:54:28Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_FILE_TRANSFER_xlsx')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "from upload to processing folder",
				"activities": [
					{
						"name": "fileTransfer",
						"description": "file transfering from upload container to processing container on data lake.",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*.xlsx",
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "dls_upload_binary",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dls_processing_binary",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Dev"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-20T12:54:28Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_LOAD_DWB_TRANSACTION')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PL_LOAD_DWB_TRANSACTION",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlDWSource",
								"sqlReaderStoredProcedureName": "[[dwh].[P_DWB_TRANSACTION_LOAD]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dsqlp_parametric",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": "dwh",
									"tableName": "DWB_transactions"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "PL_MAIN_TRANSACTION"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-20T12:52:28Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_SOAP_deneme')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "XmlSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "POST",
									"requestBody": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:onep=\"http://mec.gov.qa/BSS/soa/OnePrimaryEstablishment\">\n   <soapenv:Header/>\n   <soapenv:Body>\n      <onep:GetCommercialRegistrationInfoRequest_Input>\n         <onep:commercialRegistrationCode>72219</onep:commercialRegistrationCode>\n         <onep:RefNumber>?</onep:RefNumber>\n      </onep:GetCommercialRegistrationInfoRequest_Input>\n   </soapenv:Body>\n</soapenv:Envelope>",
									"requestTimeout": "00:10:00"
								},
								"formatSettings": {
									"type": "XmlReadSettings",
									"validationMode": "none",
									"namespaces": true
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_soap",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dsqlp_parametric",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": "dwh",
									"tableName": "STG_SOAP"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Dev"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_SP_LOOP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupColumns",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlDWSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_stg_cr_transaction_type_valid",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "LookupInitialLoad",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "LookupColumns",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlDWSource",
								"sqlReaderQuery": {
									"value": "@concat('select CASE WHEN COUNT(*)=0 THEN 1 ELSE 0 END AS LKP from dwh.DWL_CR_TRANSACTION_TYPE T1 INNER JOIN DWH.DWL_ENTITY T2\nON T1.ID_COMPANY_ENTITY=T2.ID_ENTITY_ORG WHERE T1.ID_STATUS=1 AND T2.DS_ENTITY_CR = ','''',activity('LookupColumns').output.value[1],'''') ",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_dwl_cr_transaction_type",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupInitialLoad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupColumns').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "UI_StoredProcedure",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[DwhTransferEntityTransactionType]",
										"storedProcedureParameters": {
											"CrNumber": {
												"value": {
													"value": "@item().COMPANYCR\n\n\n",
													"type": "Expression"
												},
												"type": "String"
											},
											"EntityTransactionTypeCode": {
												"value": {
													"value": "@item().COMPANYTRANSACTIONTYPE",
													"type": "Expression"
												},
												"type": "String"
											},
											"EntityTransactionTypeNameArabic": {
												"value": {
													"value": "@item().COMPANYTRANSACTIONTYPEARABIC",
													"type": "Expression"
												},
												"type": "String"
											},
											"EntityTransactionTypeNameEnglish": {
												"value": {
													"value": "@item().COMPANYTRANSACTIONTYPEENGLISH",
													"type": "Expression"
												},
												"type": "String"
											},
											"MociTransactionTypeEnglishName": {
												"value": {
													"value": "@item().PSMSMOCITRANSACTIONTYPES",
													"type": "Expression"
												},
												"type": "String"
											},
											"IsInitialLoad": {
												"value": {
													"value": "@activity('LookupInitialLoad').output.firstrow.lkp",
													"type": "Expression"
												},
												"type": "Single"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_qtrsqldb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "PL_INITIAL_LOAD/TRANSACTION_TYPE"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_SP_LOOP_entity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupColumns",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlDWSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_stg_entity_valid",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "LookupInitialLoad",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "LookupColumns",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlDWSource",
								"sqlReaderQuery": {
									"value": "@concat('select CASE WHEN COUNT(*)=0 THEN 1 ELSE 0 END AS LKP from dwh.DWL_COMPANY T1 WHERE T1.DS_CRNUMBER= ','''',activity('LookupColumns').output.value[0].DS_FILENAME,'''') ",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_dwl_cr_transaction_type",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupInitialLoad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupColumns').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "UI_StoredProcedure",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[DwhTransferEntity]",
										"storedProcedureParameters": {
											"AddressArea": {
												"value": {
													"value": "@item().AddressArea",
													"type": "Expression"
												},
												"type": "String"
											},
											"AddressAreaNumber": {
												"value": {
													"value": "@item().AddressAreaNumber",
													"type": "Expression"
												},
												"type": "String"
											},
											"AddressBuildingNumber": {
												"value": {
													"value": "@item().AddressBuildingNumber",
													"type": "Expression"
												},
												"type": "String"
											},
											"AddressPostalCode": {
												"value": {
													"value": "@item().AddressPostalCode",
													"type": "Expression"
												},
												"type": "String"
											},
											"AddressStreetName": {
												"value": {
													"value": "@item().AddressStreetName",
													"type": "Expression"
												},
												"type": "String"
											},
											"AddressStreetNumber2": {
												"value": {
													"value": "@item().AddressStreetNumber2",
													"type": "Expression"
												},
												"type": "String"
											},
											"CLNumber": {
												"value": {
													"value": "@item().CLNumber",
													"type": "Expression"
												},
												"type": "String"
											},
											"CRNumber": {
												"value": {
													"value": "@item().CRNumber",
													"type": "Expression"
												},
												"type": "String"
											},
											"Email": {
												"value": {
													"value": "@item().Email",
													"type": "Expression"
												},
												"type": "String"
											},
											"EntityTypeName": {
												"value": {
													"value": "@item().EntityTypeName",
													"type": "Expression"
												},
												"type": "String"
											},
											"Fax": {
												"value": {
													"value": "@item().Fax",
													"type": "Expression"
												},
												"type": "String"
											},
											"IsInitialLoad": {
												"value": {
													"value": "@activity('LookupInitialLoad').output.firstrow.lkp",
													"type": "Expression"
												},
												"type": "Single"
											},
											"LocationURL": {
												"value": {
													"value": "@item().LocationURL",
													"type": "Expression"
												},
												"type": "String"
											},
											"MainCompanyCrNumber": {
												"value": {
													"value": "@item().MainCompanyCrNumber",
													"type": "Expression"
												},
												"type": "String"
											},
											"MobilePhoneNumber": {
												"value": {
													"value": "@item().MobilePhoneNumber",
													"type": "Expression"
												},
												"type": "String"
											},
											"NameArabic": {
												"value": {
													"value": "@item().NameArabic",
													"type": "Expression"
												},
												"type": "String"
											},
											"NameEnglish": {
												"value": {
													"value": "@item().NameEnglish",
													"type": "Expression"
												},
												"type": "String"
											},
											"PhoneExtension": {
												"value": {
													"value": "@item().PhoneExtension",
													"type": "Expression"
												},
												"type": "String"
											},
											"PhoneNumber": {
												"value": {
													"value": "@item().PhoneNumber",
													"type": "Expression"
												},
												"type": "String"
											},
											"RecordTypeName": {
												"value": {
													"value": "@item().RecordTypeName",
													"type": "Expression"
												},
												"type": "String"
											},
											"WarehouseCapacity": {
												"value": {
													"value": "@item().WarehouseCapacity",
													"type": "Expression"
												},
												"type": "Decimal"
											},
											"WarehouseTotalArea": {
												"value": {
													"value": "@item().WarehouseTotalArea",
													"type": "Expression"
												},
												"type": "Decimal"
											},
											"WebSite": {
												"value": {
													"value": "@item().WebSite",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_qtrsqldb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "PL_INITIAL_LOAD/ENTITY"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_SP_LOOP_items')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupColumns",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlDWSource",
								"sqlReaderQuery": "SELECT  [CompanyCR]\n      ,[ITEMCODE]\n      ,[BARCODE]\n      ,[PRODUCTNAMEARABIC]\n      ,[DESCRIPTIONARABIC]\n      ,[PRODUCTNAMEENGLISH]\n      ,[DESCRIPTIONENGLISH]\n      ,[UNITITEMBARCODE]\n      ,[NOOFUNITITEMS]\n      ,[UNITWEIGHTSIZE]\n      ,[UNITUOM]\n      ,[PACKAGEUOM]\n      ,[COSTPRICE]\n      ,[SELLINGPRICE]\n      ,[BRANDTRADEMARKENGLISH]\n      ,[BRANDTRADEMARKARABIC]\n      ,CASE\nWHEN CHARINDEX(\n'???',\nCAST(JSON_VALUE(CONCAT('[\"', REPLACE(MOCIPRODUCTGROUP, ' - ', '\",\"'), '\"]'), '$[0]') AS varchar(500))\n) > 0 THEN\nCAST(JSON_VALUE(CONCAT('[\"', REPLACE(MOCIPRODUCTGROUP, ' - ', '\",\"'), '\"]'), '$[1]') AS varchar(500))\nELSE\nCAST(JSON_VALUE(CONCAT('[\"', REPLACE(MOCIPRODUCTGROUP, ' - ', '\",\"'), '\"]'), '$[0]') AS varchar(500))\nEND [MOCIPRODUCTGROUP]\n      ,[COUNTRYOFORAGENNAME]\n      ,[COUNTRYOFORAGENISO]\n      ,[HSCODE]\n      ,[SUPPLIERCR]\n      ,[SUPPLIERNAME]\n      ,[CATEGORYLEVEL11]\n      ,[CATEGORYLEVEL12]\n      ,[CATEGORYLEVEL13]\n      ,[CATEGORYLEVEL14]\n      ,[WIDTH]\n      ,[HEIGHT]\n      ,[DEPTH]\n      ,[ID_SK]\n      ,[DS_FILENAME]\n      ,[DT_FILETIME]\n      ,[DT_CREATE]\n      ,[DT_UPDATE]\n  FROM [dwh].[STG_PRODUCTS_VALID]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_stg_products_valid",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "LookupInitialLoad",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "LookupColumns",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlDWSource",
								"sqlReaderQuery": {
									"value": "@concat('select CASE WHEN COUNT(*)=0 THEN 1 ELSE 0 END AS LKP from dwh.DWL_PRODUCTS T1 INNER JOIN DWH.DWL_ENTITY T2\nON T1.ID_COMPANY=T2.ID_ENTITY_ORG WHERE T2.DS_ENTITY_CR = ','''',activity('LookupColumns').output.value[0].CompanyCR,'''') ",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_dwl_cr_transaction_type",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupInitialLoad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupColumns').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "UI_StoredProcedure",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[DwhTransferProduct]",
										"storedProcedureParameters": {
											"Barcode": {
												"value": {
													"value": "@item().BARCODE",
													"type": "Expression"
												},
												"type": "String"
											},
											"BrandNameArabic": {
												"value": {
													"value": "@item().BRANDTRADEMARKARABIC",
													"type": "Expression"
												},
												"type": "String"
											},
											"BrandNameEnglish": {
												"value": {
													"value": "@item().BRANDTRADEMARKENGLISH",
													"type": "Expression"
												},
												"type": "String"
											},
											"CostPrice": {
												"value": {
													"value": "@item().COSTPRICE",
													"type": "Expression"
												},
												"type": "Decimal"
											},
											"CrNumber": {
												"value": {
													"value": "@item().CompanyCR",
													"type": "Expression"
												},
												"type": "String"
											},
											"Depth": {
												"value": {
													"value": "@item().DEPTH",
													"type": "Expression"
												},
												"type": "Decimal"
											},
											"EntityCategoryName1": {
												"value": {
													"value": "@item().CATEGORYLEVEL11",
													"type": "Expression"
												},
												"type": "String"
											},
											"EntityCategoryName2": {
												"value": {
													"value": "@item().CATEGORYLEVEL12",
													"type": "Expression"
												},
												"type": "String"
											},
											"EntityCategoryName3": {
												"value": {
													"value": "@item().CATEGORYLEVEL13",
													"type": "Expression"
												},
												"type": "String"
											},
											"EntityCategoryName4": {
												"value": {
													"value": "@item().CATEGORYLEVEL14",
													"type": "Expression"
												},
												"type": "String"
											},
											"Height": {
												"value": {
													"value": "@item().HEIGHT",
													"type": "Expression"
												},
												"type": "Decimal"
											},
											"HsCode": {
												"value": {
													"value": "@item().HSCODE",
													"type": "Expression"
												},
												"type": "String"
											},
											"IsInitialLoad": {
												"value": {
													"value": "@activity('LookupInitialLoad').output.firstrow.lkp",
													"type": "Expression"
												},
												"type": "Single"
											},
											"ItemCode": {
												"value": {
													"value": "@item().ITEMCODE",
													"type": "Expression"
												},
												"type": "String"
											},
											"OriginCountryISO": {
												"value": {
													"value": "@item().COUNTRYOFORAGENISO",
													"type": "Expression"
												},
												"type": "String"
											},
											"OriginCountryName": {
												"value": {
													"value": "@item().COUNTRYOFORAGENNAME",
													"type": "Expression"
												},
												"type": "String"
											},
											"ProductDescriptionArabic": {
												"value": {
													"value": "@item().DESCRIPTIONARABIC",
													"type": "Expression"
												},
												"type": "String"
											},
											"ProductDescriptionEnglish": {
												"value": {
													"value": "@item().DESCRIPTIONENGLISH",
													"type": "Expression"
												},
												"type": "String"
											},
											"ProductGroupName": {
												"value": {
													"value": "@item().MOCIPRODUCTGROUP",
													"type": "Expression"
												},
												"type": "String"
											},
											"ProductNameArabic": {
												"value": {
													"value": "@item().PRODUCTNAMEARABIC",
													"type": "Expression"
												},
												"type": "String"
											},
											"ProductNameEnglish": {
												"value": {
													"value": "@item().PRODUCTNAMEENGLISH",
													"type": "Expression"
												},
												"type": "String"
											},
											"SellingPrice": {
												"value": {
													"value": "@item().SELLINGPRICE",
													"type": "Expression"
												},
												"type": "Decimal"
											},
											"SupplierCrNumber": {
												"value": {
													"value": "@item().SUPPLIERCR",
													"type": "Expression"
												},
												"type": "String"
											},
											"SupplierName": {
												"value": {
													"value": "@item().SUPPLIERNAME",
													"type": "Expression"
												},
												"type": "String"
											},
											"UnitItemBarcode": {
												"value": {
													"value": "@item().UNITITEMBARCODE",
													"type": "Expression"
												},
												"type": "String"
											},
											"UnitOfItemNumber": {
												"value": {
													"value": "@item().NOOFUNITITEMS",
													"type": "Expression"
												},
												"type": "Decimal"
											},
											"UnitOfMeasure": {
												"value": {
													"value": "@item().UNITUOM",
													"type": "Expression"
												},
												"type": "String"
											},
											"UnitOfMeasurePackage": {
												"value": {
													"value": "@item().PACKAGEUOM",
													"type": "Expression"
												},
												"type": "String"
											},
											"UnitWeightSize": {
												"value": {
													"value": "@item().UNITWEIGHTSIZE",
													"type": "Expression"
												},
												"type": "Decimal"
											},
											"Width": {
												"value": {
													"value": "@item().WIDTH",
													"type": "Expression"
												},
												"type": "Decimal"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_qtrsqldb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "PL_INITIAL_LOAD/ITEMS"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/deneme_custom_xml_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Dev"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_psmsii_syntodls",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dsqlp_parametric",
								"type": "DatasetReference"
							},
							"name": "sink4"
						}
					],
					"transformations": [
						{
							"name": "Flatten1"
						}
					],
					"script": "source(output(\n\t\tReleaseNotification as (Declaration as (ItemDetails as (Item as (countryOfOrigin as string, declaredValue as short, declaredValueQAR as short, foreignCurrency as string, hscode as integer, itemQuantity as boolean, itemQuantityUOM as string, netWeight as short, netWeightUOM as string)), SupervisorDetails as (Supervisor as (mobileNumber as string, name as string)[]), accountType as string, address as string, bolNumber as string, cargoManifestNumber as string, carrierName as string, clearingAgencyCR as short, clearingAgencyNameAR as string, clearingAgencyNameEng as string, companyName as string, companyNameAr as string, countryOfLoading as string, declarationNo as string, declarationStatus as string, declarationType as string, email as string, entryOrExitPortName as string, establishmentId as integer, exporterName as string, firstCountryOfLoading as string, importerName as string, masterBolOrAWBNumber as string, portOfLoading as string, portType as string, releaseOrderNumber as long, releasedDate as string, supplierCR as short, supplierCustomsCode as short, voyageOrFlightNumber as string), NotificationDate as string, NotificationRef as string, NotificationSender as string)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'xml',\n\tfileSystem: 'input',\n\tfileName: 'dene.xml',\n\tnullValue: 'null',\n\tvalidationMode: 'xsd',\n\tnamespaces: true,\n\tnamespacePrefixes: ['https://dlsapsmsiidt001.blob.core.windows.net/input/dene.xsd'->'dene.xsd']) ~> source1\nsource1 foldDown(unroll(ReleaseNotification.Declaration.SupervisorDetails.Supervisor),\n\tmapColumn(\n\t\tNotificationSender = ReleaseNotification.NotificationSender,\n\t\tNotificationRef = ReleaseNotification.NotificationRef,\n\t\tNotificationDate = ReleaseNotification.NotificationDate,\n\t\taccountType = ReleaseNotification.Declaration.accountType,\n\t\taddress = ReleaseNotification.Declaration.address,\n\t\tbolNumber = ReleaseNotification.Declaration.bolNumber,\n\t\tcargoManifestNumber = ReleaseNotification.Declaration.cargoManifestNumber,\n\t\tcarrierName = ReleaseNotification.Declaration.carrierName,\n\t\tclearingAgencyCR = ReleaseNotification.Declaration.clearingAgencyCR,\n\t\tclearingAgencyNameAR = ReleaseNotification.Declaration.clearingAgencyNameAR,\n\t\tclearingAgencyNameEng = ReleaseNotification.Declaration.clearingAgencyNameEng,\n\t\tcompanyName = ReleaseNotification.Declaration.companyName,\n\t\tcompanyNameAr = ReleaseNotification.Declaration.companyNameAr,\n\t\tcountryOfLoading = ReleaseNotification.Declaration.countryOfLoading,\n\t\tdeclarationNo = ReleaseNotification.Declaration.declarationNo,\n\t\tdeclarationStatus = ReleaseNotification.Declaration.declarationStatus,\n\t\tdeclarationType = ReleaseNotification.Declaration.declarationType,\n\t\temail = ReleaseNotification.Declaration.email,\n\t\tentryOrExitPortName = ReleaseNotification.Declaration.entryOrExitPortName,\n\t\testablishmentId = ReleaseNotification.Declaration.establishmentId,\n\t\texporterName = ReleaseNotification.Declaration.exporterName,\n\t\tfirstCountryOfLoading = ReleaseNotification.Declaration.firstCountryOfLoading,\n\t\timporterName = ReleaseNotification.Declaration.importerName,\n\t\tmasterBolOrAWBNumber = ReleaseNotification.Declaration.masterBolOrAWBNumber,\n\t\tportOfLoading = ReleaseNotification.Declaration.portOfLoading,\n\t\tportType = ReleaseNotification.Declaration.portType,\n\t\treleaseOrderNumber = ReleaseNotification.Declaration.releaseOrderNumber,\n\t\treleasedDate = ReleaseNotification.Declaration.releasedDate,\n\t\tsupplierCR = ReleaseNotification.Declaration.supplierCR,\n\t\tsupplierCustomsCode = ReleaseNotification.Declaration.supplierCustomsCode,\n\t\tvoyageOrFlightNumber = ReleaseNotification.Declaration.voyageOrFlightNumber,\n\t\tmobileNumber = ReleaseNotification.Declaration.SupervisorDetails.Supervisor.mobileNumber,\n\t\tname = ReleaseNotification.Declaration.SupervisorDetails.Supervisor.name,\n\t\tcountryOfOrigin = ReleaseNotification.Declaration.ItemDetails.Item.countryOfOrigin,\n\t\tdeclaredValue = ReleaseNotification.Declaration.ItemDetails.Item.declaredValue,\n\t\tdeclaredValueQAR = ReleaseNotification.Declaration.ItemDetails.Item.declaredValueQAR,\n\t\tforeignCurrency = ReleaseNotification.Declaration.ItemDetails.Item.foreignCurrency,\n\t\thscode = ReleaseNotification.Declaration.ItemDetails.Item.hscode,\n\t\titemQuantity = ReleaseNotification.Declaration.ItemDetails.Item.itemQuantity,\n\t\titemQuantityUOM = ReleaseNotification.Declaration.ItemDetails.Item.itemQuantityUOM,\n\t\tnetWeight = ReleaseNotification.Declaration.ItemDetails.Item.netWeight,\n\t\tnetWeightUOM = ReleaseNotification.Declaration.ItemDetails.Item.netWeightUOM\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Flatten1\nFlatten1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tstaged: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink4"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_csv_to_stg')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dls_processing_csv",
								"type": "DatasetReference"
							},
							"name": "processingCsv"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_stg_transactions",
								"type": "DatasetReference"
							},
							"name": "stgTransactions"
						}
					],
					"transformations": [
						{
							"name": "AddColumn"
						},
						{
							"name": "SurrogateKey1"
						}
					],
					"script": "parameters{\n\tfileName as string ('4')\n}\nsource(output(\n\t\t{Transaction Date - تاريخ الحركة } as string,\n\t\t{Transaction Type Code - كود نوع الحركة} as string,\n\t\t{Item Code - كود الصنف} as string,\n\t\t{Item Barcode - باركود الصنف} as string,\n\t\t{Your Company CR# - رقم السجل التجارى للشركة} as string,\n\t\t{Other Entity CR# - رقم السجل التجارى للطرف الاخر} as string,\n\t\t{Company Store/Inventory Code - رقم المخزن } as string,\n\t\t{Quantity - الكمية} as string,\n\t\t{Selling Price per unit - سعر البيع للوحدة  -} as string,\n\t\t{Comon Referance No. -  رقم المرجع المشترك} as string,\n\t\t{Internal Transfer Number/Code - رقم التحويل الداخلي} as string,\n\t\t{Number of Consumer Invoices - عدد فواتير البيع للمستهلك} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> processingCsv\nprocessingCsv derive(STG_FILENAME = $fileName,\n\t\tSTG_FILEDATE = left(toString(fromUTC(currentTimestamp(), 'Asia/Istanbul')),19),\n\t\tTRANSACTION_DATE = regexReplace({Transaction Date - تاريخ الحركة },'[^0-9a-zA-Z]+','')) ~> AddColumn\nAddColumn keyGenerate(output(SK_ID_SUR as long),\n\tstartAt: 1L) ~> SurrogateKey1\nSurrogateKey1 sink(allowSchemaDrift: true,\n\tvalidateSchema: true,\n\tinput(\n\t\tTRANSACTION_DATE as string,\n\t\tTRANSACTION_TYPE_CODE as string,\n\t\tITEM_CODE as string,\n\t\tITEM_BARCODE as string,\n\t\tYOUR_COMPANY_CR as string,\n\t\tOTHER_ENTITY_CR as string,\n\t\tCOMPANY_STORE_INVENTORY_CODE as string,\n\t\tQUANTITY as string,\n\t\tSELLING_PRICE_PER_UNIT as string,\n\t\tCOMMON_REFERANCE_NO as string,\n\t\tINTERNAL_TRANSFER_NUMBER_CODE as string,\n\t\tNUMBER_OF_CONSUMER_INVOICES as string,\n\t\tID_SK as integer,\n\t\tDS_FILENAME as string,\n\t\tDT_FILETIME as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tID_YEARMONTHDAY = TRANSACTION_DATE,\n\t\tID_TRANSACTION_TYPE = {Transaction Type Code - كود نوع الحركة},\n\t\tID_ITEM_CODE = {Item Code - كود الصنف},\n\t\tID_ITEM_BARCODE = {Item Barcode - باركود الصنف},\n\t\tID_ENTITY_CR = {Your Company CR# - رقم السجل التجارى للشركة},\n\t\tID_CUSTOMER_ENTITY_CR = {Other Entity CR# - رقم السجل التجارى للطرف الاخر},\n\t\tID_COMPANY_STORE_CODE = {Company Store/Inventory Code - رقم المخزن },\n\t\tMT_QUANTITY = {Quantity - الكمية},\n\t\tMT_DISCOUNT_AMOUNT = {Selling Price per unit - سعر البيع للوحدة  -},\n\t\tID_COMMON_REF_CODE = {Comon Referance No. -  رقم المرجع المشترك},\n\t\tID_TRANSFER_CODE = {Internal Transfer Number/Code - رقم التحويل الداخلي},\n\t\tID_INVOICE_NUMBER = {Number of Consumer Invoices - عدد فواتير البيع للمستهلك},\n\t\tSK_ID = SK_ID_SUR,\n\t\tSTG_FILENAME,\n\t\tSTG_FILETIME = STG_FILEDATE\n\t)) ~> stgTransactions"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_custom_xml_to_db')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_custom_xml",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dsqlp_parametric",
								"type": "DatasetReference"
							},
							"name": "DECLARATION"
						},
						{
							"dataset": {
								"referenceName": "dsqlp_parametric",
								"type": "DatasetReference"
							},
							"name": "ITEM"
						},
						{
							"dataset": {
								"referenceName": "dsqlp_parametric",
								"type": "DatasetReference"
							},
							"name": "SUPERVISOR"
						}
					],
					"transformations": [
						{
							"name": "FlattenSupervisor"
						},
						{
							"name": "FlattenItem"
						}
					],
					"script": "parameters{\n\txmlfilename as string ('a')\n}\nsource(output(\n\t\tReleaseNotification as (Declaration as (ItemDetails as (Item as (countryOfOrigin as string, declaredValue as double, declaredValueQAR as double, foreignCurrency as string, hscode as integer, itemQuantity as double, itemQuantityUOM as string, netWeight as short, netWeightUOM as string)[]), SupervisorDetails as (Supervisor as (mobileNumber as long, name as string)[]), accountType as string, address as string, bolNumber as string, cargoManifestNumber as integer, carrierName as string, clearingAgencyCR as string, clearingAgencyNameAR as string, clearingAgencyNameEng as string, companyName as string, companyNameAr as string, countryOfLoading as string, declarationNo as string, declarationStatus as string, declarationType as string, email as string, entryOrExitPortName as string, establishmentId as integer, exporterName as string, firstCountryOfLoading as string, importerName as string, masterBolOrAWBNumber as string, portOfLoading as string, portType as string, releaseOrderNumber as long, releasedDate as string, supplierCR as short, supplierCustomsCode as string, voyageOrFlightNumber as string), NotificationDate as string, NotificationRef as string, NotificationSender as string)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: true,\n\tvalidationMode: 'none',\n\tnamespaces: false) ~> source1\nsource1 foldDown(unroll(ReleaseNotification.Declaration.SupervisorDetails.Supervisor, ReleaseNotification.Declaration.SupervisorDetails.Supervisor),\n\tmapColumn(\n\t\tmobileNumber = ReleaseNotification.Declaration.SupervisorDetails.Supervisor.mobileNumber,\n\t\tname = ReleaseNotification.Declaration.SupervisorDetails.Supervisor.name,\n\t\tdeclarationNo = ReleaseNotification.Declaration.declarationNo\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FlattenSupervisor\nsource1 foldDown(unroll(ReleaseNotification.Declaration.ItemDetails.Item, ReleaseNotification.Declaration.ItemDetails.Item),\n\tmapColumn(\n\t\tcountryOfOrigin = ReleaseNotification.Declaration.ItemDetails.Item.countryOfOrigin,\n\t\tdeclaredValue = ReleaseNotification.Declaration.ItemDetails.Item.declaredValue,\n\t\tdeclaredValueQAR = ReleaseNotification.Declaration.ItemDetails.Item.declaredValueQAR,\n\t\tforeignCurrency = ReleaseNotification.Declaration.ItemDetails.Item.foreignCurrency,\n\t\thscode = ReleaseNotification.Declaration.ItemDetails.Item.hscode,\n\t\titemQuantity = ReleaseNotification.Declaration.ItemDetails.Item.itemQuantity,\n\t\titemQuantityUOM = ReleaseNotification.Declaration.ItemDetails.Item.itemQuantityUOM,\n\t\tnetWeight = ReleaseNotification.Declaration.ItemDetails.Item.netWeight,\n\t\tnetWeightUOM = ReleaseNotification.Declaration.ItemDetails.Item.netWeightUOM,\n\t\tdeclarationNo = ReleaseNotification.Declaration.declarationNo\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> FlattenItem\nsource1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tNotificationSender = ReleaseNotification.NotificationSender,\n\t\tNotificationDate = ReleaseNotification.NotificationDate,\n\t\tNotificationRef = ReleaseNotification.NotificationRef,\n\t\taddress = ReleaseNotification.Declaration.address,\n\t\tbolNumber = ReleaseNotification.Declaration.bolNumber,\n\t\tcargoManifestNumber = ReleaseNotification.Declaration.cargoManifestNumber,\n\t\tcarrierName = ReleaseNotification.Declaration.carrierName,\n\t\tclearingAgencyCR = ReleaseNotification.Declaration.clearingAgencyCR,\n\t\tclearingAgencyNameAR = ReleaseNotification.Declaration.clearingAgencyNameAR,\n\t\tclearingAgencyNameEng = ReleaseNotification.Declaration.clearingAgencyNameEng,\n\t\tcompanyName = ReleaseNotification.Declaration.companyName,\n\t\tcompanyNameAr = ReleaseNotification.Declaration.companyNameAr,\n\t\tcountryOfLoading = ReleaseNotification.Declaration.countryOfLoading,\n\t\tdeclarationNo = ReleaseNotification.Declaration.declarationNo,\n\t\tdeclarationStatus = ReleaseNotification.Declaration.declarationStatus,\n\t\tdeclarationType = ReleaseNotification.Declaration.declarationType,\n\t\temail = ReleaseNotification.Declaration.email,\n\t\tentryOrExitPortName = ReleaseNotification.Declaration.entryOrExitPortName,\n\t\testablishmentId = ReleaseNotification.Declaration.establishmentId,\n\t\texporterName = ReleaseNotification.Declaration.exporterName,\n\t\tfirstCountryOfLoading = ReleaseNotification.Declaration.firstCountryOfLoading,\n\t\timporterName = ReleaseNotification.Declaration.importerName,\n\t\tmasterBolOrAWBNumber = ReleaseNotification.Declaration.masterBolOrAWBNumber,\n\t\tportOfLoading = ReleaseNotification.Declaration.portOfLoading,\n\t\tportType = ReleaseNotification.Declaration.portType,\n\t\treleaseOrderNumber = ReleaseNotification.Declaration.releaseOrderNumber,\n\t\treleasedDate = ReleaseNotification.Declaration.releasedDate,\n\t\tsupplierCR = ReleaseNotification.Declaration.supplierCR,\n\t\tsupplierCustomsCode = ReleaseNotification.Declaration.supplierCustomsCode,\n\t\tvoyageOrFlightNumber = ReleaseNotification.Declaration.voyageOrFlightNumber,\n\t\taccountType = ReleaseNotification.Declaration.accountType\n\t)) ~> DECLARATION\nFlattenItem sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tcountryOfOrigin,\n\t\tdeclaredValue,\n\t\tdeclaredValueQAR,\n\t\tforeignCurrency,\n\t\thscode,\n\t\titemQuantity,\n\t\titemQuantityUOM,\n\t\tnetWeight,\n\t\tnetWeightUOM,\n\t\tdeclarationNo\n\t)) ~> ITEM\nFlattenSupervisor sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tmobileNumber,\n\t\tname,\n\t\tdeclarationNo\n\t)) ~> SUPERVISOR"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_custom_xml_to_db_copy')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_custom_xml",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dsqlp_parametric",
								"type": "DatasetReference"
							},
							"name": "DECLARATION"
						},
						{
							"dataset": {
								"referenceName": "dsqlp_parametric",
								"type": "DatasetReference"
							},
							"name": "ITEM"
						},
						{
							"dataset": {
								"referenceName": "dsqlp_parametric",
								"type": "DatasetReference"
							},
							"name": "SUPERVISOR"
						}
					],
					"transformations": [
						{
							"name": "FlattenSupervisor"
						},
						{
							"name": "FlattenItem"
						}
					],
					"script": "parameters{\n\txmlfilename as string ('a')\n}\nsource(output(\n\t\tReleaseNotification as ({@xmlns:xsi} as string, {@xsi:noNamespaceSchemaLocation} as string, Declaration as (ItemDetails as (Item as (countryOfOrigin as string, declaredValue as short, declaredValueQAR as short, foreignCurrency as string, hscode as integer, itemQuantity as boolean, itemQuantityUOM as string, netWeight as short, netWeightUOM as string)[]), SupervisorDetails as (Supervisor as (mobileNumber as string, name as string)[]), accountType as string, address as string, bolNumber as string, cargoManifestNumber as string, carrierName as string, clearingAgencyCR as short, clearingAgencyNameAR as string, clearingAgencyNameEng as string, companyName as string, companyNameAr as string, countryOfLoading as string, declarationNo as string, declarationStatus as string, declarationType as string, email as string, entryOrExitPortName as string, establishmentId as integer, exporterName as string, firstCountryOfLoading as string, importerName as string, masterBolOrAWBNumber as string, portOfLoading as string, portType as string, releaseOrderNumber as long, releasedDate as string, supplierCR as short, supplierCustomsCode as short, voyageOrFlightNumber as string), NotificationDate as string, NotificationRef as string, NotificationSender as string)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tvalidationMode: 'none',\n\tnamespaces: false) ~> source1\nsource1 foldDown(unroll(ReleaseNotification.Declaration.SupervisorDetails.Supervisor, ReleaseNotification.Declaration.SupervisorDetails.Supervisor),\n\tmapColumn(\n\t\tmobileNumber = ReleaseNotification.Declaration.SupervisorDetails.Supervisor.mobileNumber,\n\t\tname = ReleaseNotification.Declaration.SupervisorDetails.Supervisor.name,\n\t\tdeclarationNo = ReleaseNotification.Declaration.declarationNo\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FlattenSupervisor\nsource1 foldDown(unroll(ReleaseNotification.Declaration.ItemDetails.Item, ReleaseNotification.Declaration.ItemDetails.Item),\n\tmapColumn(\n\t\tcountryOfOrigin = ReleaseNotification.Declaration.ItemDetails.Item.countryOfOrigin,\n\t\tdeclaredValue = ReleaseNotification.Declaration.ItemDetails.Item.declaredValue,\n\t\tdeclaredValueQAR = ReleaseNotification.Declaration.ItemDetails.Item.declaredValueQAR,\n\t\tforeignCurrency = ReleaseNotification.Declaration.ItemDetails.Item.foreignCurrency,\n\t\thscode = ReleaseNotification.Declaration.ItemDetails.Item.hscode,\n\t\titemQuantity = ReleaseNotification.Declaration.ItemDetails.Item.itemQuantity,\n\t\titemQuantityUOM = ReleaseNotification.Declaration.ItemDetails.Item.itemQuantityUOM,\n\t\tnetWeight = ReleaseNotification.Declaration.ItemDetails.Item.netWeight,\n\t\tnetWeightUOM = ReleaseNotification.Declaration.ItemDetails.Item.netWeightUOM,\n\t\tdeclarationNo = ReleaseNotification.Declaration.declarationNo\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> FlattenItem\nsource1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tNotificationSender = ReleaseNotification.NotificationSender,\n\t\tNotificationRef = ReleaseNotification.NotificationRef,\n\t\tNotificationDate = ReleaseNotification.NotificationDate\n\t)) ~> DECLARATION\nFlattenItem sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tcountryOfOrigin,\n\t\tdeclaredValue,\n\t\tdeclaredValueQAR,\n\t\tforeignCurrency,\n\t\thscode,\n\t\titemQuantity,\n\t\titemQuantityUOM,\n\t\tnetWeight,\n\t\tnetWeightUOM,\n\t\tdeclarationNo\n\t)) ~> ITEM\nFlattenSupervisor sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tmobileNumber,\n\t\tname,\n\t\tdeclarationNo\n\t)) ~> SUPERVISOR"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_dwl_file_list_upd_exist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_dwl_file_list",
								"type": "DatasetReference"
							},
							"name": "dwhfilelist"
						},
						{
							"dataset": {
								"referenceName": "ds_stg_file_list",
								"type": "DatasetReference"
							},
							"name": "stgfilelist"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_dwl_file_list",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "Exists"
						},
						{
							"name": "AlterRow2"
						},
						{
							"name": "DerivedColumn1"
						}
					],
					"script": "source(output(\n\t\tDT_FILE as date,\n\t\tDS_ENTITY_CODE as string,\n\t\tID_ENTITY as integer,\n\t\tDS_FILENAME as string,\n\t\tID_ISUPLOADED as integer,\n\t\tID_ISREJECTED as boolean,\n\t\tDS_EMAIL as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> dwhfilelist\nsource(output(\n\t\tDS_FILENAME as string,\n\t\tID_ISEXPECTED as integer,\n\t\tDS_EMAIL as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> stgfilelist\ndwhfilelist, stgfilelist exists(dwhfilelist@DS_FILENAME == stgfilelist@DS_FILENAME,\n\tnegate:false,\n\tbroadcast: 'auto')~> Exists\nExists alterRow(updateIf(not(isNull(DS_FILENAME)))) ~> AlterRow2\nAlterRow2 derive(ID_ISUPLOADED = 1,\n\t\tDS_EMAIL = 'ali.demir@obase.com') ~> DerivedColumn1\nDerivedColumn1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tDT_FILE as date,\n\t\tDS_ENTITY_CODE as string,\n\t\tID_ENTITY as integer,\n\t\tDS_FILENAME as string,\n\t\tID_ISUPLOADED as integer,\n\t\tID_ISREJECTED as boolean,\n\t\tDS_EMAIL as string\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['DS_FILENAME'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink2"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_dwl_file_list_upd_notexist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_dwl_file_list",
								"type": "DatasetReference"
							},
							"name": "dwhfilelist"
						},
						{
							"dataset": {
								"referenceName": "ds_stg_file_list",
								"type": "DatasetReference"
							},
							"name": "stgfilelist"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_dwl_file_list",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "NotExists"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "idisexpected"
						}
					],
					"script": "source(output(\n\t\tDT_FILE as date,\n\t\tDS_ENTITY_CODE as string,\n\t\tID_ENTITY as integer,\n\t\tDS_FILENAME as string,\n\t\tID_ISUPLOADED as integer,\n\t\tID_ISREJECTED as boolean,\n\t\tDS_EMAIL as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> dwhfilelist\nsource(output(\n\t\tDS_FILENAME as string,\n\t\tID_ISEXPECTED as integer,\n\t\tDS_EMAIL as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> stgfilelist\ndwhfilelist, stgfilelist exists(dwhfilelist@DS_FILENAME == stgfilelist@DS_FILENAME,\n\tnegate:true,\n\tbroadcast: 'auto')~> NotExists\nNotExists alterRow(updateIf(not(isNull(DS_FILENAME)))) ~> AlterRow1\nAlterRow1 derive(ID_ISUPLOADED = 0,\n\t\tDS_EMAIL = 'ali.demir@obase.com') ~> idisexpected\nidisexpected sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tDT_FILE as date,\n\t\tDS_ENTITY_CODE as string,\n\t\tID_ENTITY as integer,\n\t\tDS_FILENAME as string,\n\t\tID_ISUPLOADED as integer,\n\t\tID_ISREJECTED as boolean,\n\t\tDS_EMAIL as string\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['DS_FILENAME'],\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_errlog_container_company')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dsqlp_parametric",
								"type": "DatasetReference"
							},
							"name": "stgcompanyerrorlog"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dls_errorlog_parametric",
								"type": "DatasetReference"
							},
							"name": "errorlogcompany"
						}
					],
					"transformations": [
						{
							"name": "dsfilename"
						}
					],
					"script": "source(output(\n\t\tMainorBranch as string,\n\t\tCompanyType as string,\n\t\tCompanyNameArabic as string,\n\t\tCompanyNameEnglish as string,\n\t\tCommercialRegistrationNo as string,\n\t\tCommercialLicensenumber as string,\n\t\tArea as string,\n\t\tStreetName as string,\n\t\tAreaNumber as string,\n\t\tStreetNumber2 as string,\n\t\tBuildingNumber as string,\n\t\tPhoneNumber as string,\n\t\tFax as string,\n\t\t{P.O.Box} as string,\n\t\tEmail as string,\n\t\tWebsite as string,\n\t\tMapLocationUrl as string,\n\t\tID_SK as integer,\n\t\tDS_FILENAME as string,\n\t\tDT_FILETIME as timestamp,\n\t\tID_ERROR_CODE as integer,\n\t\tDS_ERROR_CODE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: true) ~> stgcompanyerrorlog\nstgcompanyerrorlog derive(DS_FILENAME = replace((replace(DS_FILENAME,'.xlsx','_company_err.csv')),'.xls','_company_err.csv')) ~> dsfilename\ndsfilename sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\trowUrlColumn:'DS_FILENAME',\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tMainorBranch,\n\t\tCompanyType,\n\t\tCompanyNameArabic,\n\t\tCompanyNameEnglish,\n\t\tCommercialRegistrationNo,\n\t\tCommercialLicensenumber,\n\t\tArea,\n\t\tStreetName,\n\t\tAreaNumber,\n\t\tStreetNumber2,\n\t\tBuildingNumber,\n\t\tPhoneNumber,\n\t\tFax,\n\t\tBox = {P.O.Box},\n\t\tEmail,\n\t\tWebsite,\n\t\tMapLocationUrl,\n\t\tID_SK,\n\t\tDS_FILENAME,\n\t\tDT_FILETIME,\n\t\tID_ERROR_CODE,\n\t\tDS_ERROR_CODE\n\t)) ~> errorlogcompany"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_errlog_container_contact')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dsqlp_parametric",
								"type": "DatasetReference"
							},
							"name": "stgcontacterrlog"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dls_errorlog_parametric",
								"type": "DatasetReference"
							},
							"name": "errorlogcontact"
						}
					],
					"transformations": [
						{
							"name": "dsfilename"
						}
					],
					"script": "source(output(\n\t\tSEQ as string,\n\t\tNAME as string,\n\t\tEMAIL as string,\n\t\tPHONE as string,\n\t\tEXTENSION as string,\n\t\tMOBILE as string,\n\t\tENTITYCR as string,\n\t\tID_SK as integer,\n\t\tDS_FILENAME as string,\n\t\tDT_FILETIME as timestamp,\n\t\tID_ERROR_CODE as integer,\n\t\tDS_ERROR_CODE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> stgcontacterrlog\nstgcontacterrlog derive(DS_FILENAME = replace((replace(DS_FILENAME,'.xlsx','_contact_err.csv')),'.xls','_contact_err.csv')) ~> dsfilename\ndsfilename sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\trowUrlColumn:'DS_FILENAME',\n\ttruncate: true,\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tSEQ,\n\t\tNAME,\n\t\tEMAIL,\n\t\tPHONE,\n\t\tEXTENSION,\n\t\tMOBILE,\n\t\tENTITYCR,\n\t\tID_SK,\n\t\tDS_FILENAME,\n\t\tDT_FILETIME,\n\t\tID_ERROR_CODE,\n\t\tDS_ERROR_CODE\n\t)) ~> errorlogcontact"
				}
			},
			"dependsOn": []
		}
	]
}